{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Projeto ITP - Esteganografia  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}Projeto ITP - Esteganografia}
{\comment Gerado por doxygen 1.11.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Projeto ITP - Esteganografia}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos componentes\par \pard\plain 
{\tc \v \'CDndice dos componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de componentes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de classes, estruturas, uni\'F5es e interfaces com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Image} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define uma imagem PPM alocada dinamicamente e fornece v\'E1rios m\'E9todos para manipular e acessar os dados da imagem })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Pixel} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct que define o pixel de uma imagem PPM })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos ficheiros\par \pard\plain 
{\tc \v \'CDndice dos ficheiros}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de ficheiros\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos os ficheiros com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/{\b cod.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/{\b decod.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/{\b Image.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de cabe\'E7alho usado tanto na codifica\'E7\'E3o quanto na decodifica\'E7\'E3o de imagens PPM usando esteganografia })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o da classe{\tc \v Documenta\'E7\'E3o da classe}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Image\par \pard\plain 
{\tc\tcl2 \v Image}
{\xe \v Image}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define uma imagem PPM alocada dinamicamente e fornece v\'E1rios m\'E9todos para manipular e acessar os dados da imagem. }}\par
{
{\f2 #include <Image.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Image} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o para a classe {\b Image}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Image} (int w, int h)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor para inicializar uma imagem com largura e altura fornecidas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetWidth} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m a largura da imagem. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetHeight} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m a altura da imagem. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b AllocatePixels} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aloca\'E7\'E3o de mem\'F3ria da matriz de pixels, fundamental na defini\'E7\'E3o de qualquer objeto {\b Image}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b LiberatePixels} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Libera a mem\'F3ria previamente alocada pela fun\'E7\'E3o {\b AllocatePixels()}, bem como a mem\'F3ria alocada pelo array dos valores 'R', 'G' e 'B' dos pixels. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetPixels} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que preenche a matriz de pixels. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PrintPPM} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que imprime os par\'E2metros de uma imagem PPM. Usada para fins de teste. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b ExtensionCheck} (const string &input_text, const string &file_type)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que verifica se uma string termina com a substring v\'E1lida. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b CreatePPM} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria uma string contendo todos os dados de uma imagem PPM. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b ReadPPM} (const string &file_name)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA e armazena dinamicamente o conte\'FAdo de uma imagem de um arquivo PPM v\'E1lido. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ShowArray} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que exibe um array previamente definido de valores 'R', 'G' e 'B'. Usada para fins de teste. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b IntToBin} (int num, int bits=8)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o recursiva para converter um valor inteiro em um valor bin\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b CodeMsg} (string msg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o principal usada na codifica\'E7\'E3o e oculta\'E7\'E3o de uma mensagem ASCII nos bits menos significativos (LSB) dos pixels de uma imagem PPM. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b BinToInt} (string bin_num, int index=0)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o recursiva usada para converter um valor bin\'E1rio em um valor inteiro. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b DecodeMsg} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o principal usada para descobrir e decodificar uma mensagem ASCII oculta nos bits menos significativos (LSB) dos pixels de uma imagem PPM. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define uma imagem PPM alocada dinamicamente e fornece v\'E1rios m\'E9todos para manipular e acessar os dados da imagem. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Image\:Image}
{\xe \v Image\:Image}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Image::Image (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o para a classe {\b Image}. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 43             : width(0), height(0), pixel({\cf17 nullptr}), pixel_array({\cf17 nullptr})\par
44     \{\}\par
}
}
{\xe \v Image\:Image}
{\xe \v Image\:Image}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Image::Image (int w, int h){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor para inicializar uma imagem com largura e altura fornecidas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Esta vari\'E1vel define o tamanho do array de pixels, contando cada valor 'R', 'G' e 'B' como uma unidade separada do array.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 49                         : width(w), height(h)\par
50     \{\par
51         size = (width * height) * 3; \par
52     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v AllocatePixels\:Image}
{\xe \v Image\:AllocatePixels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::AllocatePixels (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aloca\'E7\'E3o de mem\'F3ria da matriz de pixels, fundamental na defini\'E7\'E3o de qualquer objeto {\b Image}. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 74     \{\par
75         pixel = {\cf17 new} Pixel *[height];\par
76         {\cf19 for} ({\cf18 int} i = 0; i < height; i++)\par
77         \{\par
78             pixel[i] = {\cf17 new} Pixel[width];\par
79         \}\par
80     \}\par
}
}
{\xe \v BinToInt\:Image}
{\xe \v Image\:BinToInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Image::BinToInt (string bin_num, int index = {\f2 0}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o recursiva usada para converter um valor bin\'E1rio em um valor inteiro. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bin_num} \cell }{String contendo o valor bin\'E1rio que ser\'E1 convertido em um inteiro. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{O \'EDndice da string. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a soma do valor atual e subsequente adquirido recursivamente. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Caso base: se o \'EDndice atingir o final da string bin\'E1ria. \par
Chamada recursiva para calcular o valor do d\'EDgito bin\'E1rio atual e subsequente.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 360     \{\par
362         {\cf19 if} (index == bin_num.length())\par
363         \{\par
364             {\cf19 return} 0;\par
365         \}\par
366 \par
368         {\cf18 int} value_current = (bin_num[index] - {\cf23 '0'}) * pow(2, bin_num.length() - 1 - index);\par
369         {\cf18 int} value_subsequent = BinToInt(bin_num, index + 1);\par
370 \par
371         {\cf19 return} value_current + value_subsequent;\par
372     \}\par
}
}
{\xe \v CodeMsg\:Image}
{\xe \v Image\:CodeMsg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::CodeMsg (string msg){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o principal usada na codifica\'E7\'E3o e oculta\'E7\'E3o de uma mensagem ASCII nos bits menos significativos (LSB) dos pixels de uma imagem PPM. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i msg} \cell }{Mensagem que ser\'E1 armazenada dentro da imagem. \cell }
{\row }
}
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjO n\'FAmero de caracteres na mensagem. \par
}{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArray que armazena os valores ASCII de cada um dos caracteres da mensagem. \par
}Preenche o array chars[].\par
Armazena o valor bin\'E1rio do n\'FAmero de caracteres na mensagem.\par
Modifica\'E7\'E3o dos primeiros 8 bits do array de valores 'R', 'G' e 'B' que armazena o tamanho da mensagem.\par
Modifica os bits do array de valores 'R', 'G' e 'B' que armazenar\'E3o a mensagem real.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwj\'CDndice para cada um dos bits da mensagem. \par
}}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 292     \{\par
293         {\cf18 int} t = msg.size(); \par
294         {\cf18 int} chars[t];       \par
297         {\cf19 for} ({\cf18 int} i = 0; i < t; ++i)\par
298         \{\par
299             chars[i] = (int)msg[i];\par
300         \}\par
301 \par
303         {\cf18 string} bin = IntToBin(t);\par
304 \par
306         {\cf19 for} ({\cf18 int} i = 0; i < 8 && i < size; ++i)\par
307         \{\par
308             {\cf19 if} (bin[i] == {\cf23 '1'})\par
309             \{\par
310                 {\cf19 if} (pixel_array[i] % 2 == 0)\par
311                 \{\par
312                     pixel_array[i]++;\par
313                 \}\par
314             \}\par
315             {\cf19 else}\par
316             \{\par
317                 {\cf19 if} (pixel_array[i] % 2 != 0)\par
318                 \{\par
319                     pixel_array[i]++;\par
320                 \}\par
321             \}\par
322         \}\par
323 \par
325         {\cf18 int} bit_index = 0; \par
326         {\cf19 for} ({\cf18 int} j = 0; j < t; ++j)\par
327         \{\par
328             bin = IntToBin(chars[j]);\par
329             {\cf19 for} ({\cf18 int} i = 0; i < 8 && (bit_index + 8) < size; ++i, ++bit_index)\par
330             \{\par
331                 {\cf19 if} (bin[i] == {\cf23 '1'})\par
332                 \{\par
333                     {\cf19 if} (pixel_array[bit_index + 8] % 2 == 0)\par
334                     \{\par
335                         pixel_array[bit_index + 8]++;\par
336                     \}\par
337                 \}\par
338                 {\cf19 else}\par
339                 \{\par
340                     {\cf19 if} (pixel_array[bit_index + 8] % 2 != 0)\par
341                     \{\par
342                         pixel_array[bit_index + 8]++;\par
343                         {\cf19 if} (pixel_array[bit_index + 8] == 255)\par
344                         \{\par
345                             pixel_array[bit_index + 8]--;\par
346                         \}\par
347                     \}\par
348                 \}\par
349             \}\par
350         \}\par
351     \}\par
}
}
{\xe \v CreatePPM\:Image}
{\xe \v Image\:CreatePPM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Image::CreatePPM () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria uma string contendo todos os dados de uma imagem PPM. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
todas as informa\'E7\'F5es necess\'E1rias para definir uma imagem PPM. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m os pixels de um array de pixels previamente definido.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 174     \{\par
175         stringstream img_content;\par
176 \par
177         img_content << {\cf22 "P3"} << endl;\par
178         img_content << width << {\cf22 " "} << height << endl;\par
179         img_content << max_color << endl;\par
180 \par
182         {\cf19 for} ({\cf18 int} i = 0; i < size; i += 3)\par
183         \{\par
184             img_content << pixel_array[i] << {\cf22 " "} << pixel_array[i + 1] << {\cf22 " "} << pixel_array[i + 2] << {\cf22 " "};\par
185             {\cf19 if} ((i / 3 + 1) % width == 0)\par
186             \{\par
187                 img_content << endl;\par
188             \}\par
189         \}\par
190         {\cf19 return} img_content.str();\par
191     \}\par
}
}
{\xe \v DecodeMsg\:Image}
{\xe \v Image\:DecodeMsg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::DecodeMsg (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o principal usada para descobrir e decodificar uma mensagem ASCII oculta nos bits menos significativos (LSB) dos pixels de uma imagem PPM. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjString que armazena o tamanho da mensagem em bin\'E1rio. \par
}Obt\'E9m (em bin\'E1rio) o tamanho da mensagem armazenada na imagem a partir dos primeiros 8 bits dos valores 'R', 'G' e 'B' dos pixels, previamente armazenados em um array.\par
Adiciona o caractere '0' a bin_size.\par
Adiciona o caractere '1' a bin_size.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjString que armazena a mensagem ASCII em bin\'E1rio. \par
}{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena o tamanho da imagem como um valor inteiro. \par
}Obt\'E9m (em bin\'E1rio) a mensagem armazenada na imagem, usando o tamanho da mensagem e usando o array de valores 'R', 'G' e 'B' dos pixels.\par
Adiciona o caractere '0' a bin_msg.\par
Adiciona o caractere '1' a bin_msg.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjString que armazena a mensagem completamente decodificada. \par
}Repete o processo abaixo at\'E9 que todos os caracteres da mensagem tenham sido decodificados e armazenados.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena um valor bin\'E1rio de um \'FAnico caractere. \par
}Obt\'E9m 8 bits (ou um \'FAnico caractere) da mensagem em bin\'E1rio, ent\'E3o adiciona at\'E9 que fa\'E7a o mesmo com o pr\'F3ximo bit (se houver um pr\'F3ximo bit).\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena o caractere ASCII decodificado como um char. \par
}Empurra um novo caractere decodificado na string que armazena a mensagem.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 378     \{\par
379         {\cf18 string} bin_size; \par
382         {\cf19 for} ({\cf18 int} i = 0; i < 8; ++i)\par
383         \{\par
384             {\cf19 if} (pixel_array[i] % 2 == 0)\par
385             \{\par
386                 bin_size.push_back({\cf23 '0'}); \par
387             \}\par
388             {\cf19 else}\par
389             \{\par
390                 bin_size.push_back({\cf23 '1'}); \par
391             \}\par
392         \}\par
393 \par
394         {\cf18 string} bin_msg;                    \par
395         {\cf18 int} msg_size = BinToInt(bin_size); \par
398         {\cf19 for} ({\cf18 int} i = 8; i < 8 + (msg_size * 8); ++i)\par
399         \{\par
400             {\cf19 if} (pixel_array[i] % 2 == 0)\par
401             \{\par
402                 bin_msg.push_back({\cf23 '0'}); \par
403             \}\par
404             {\cf19 else}\par
405             \{\par
406                 bin_msg.push_back({\cf23 '1'}); \par
407             \}\par
408         \}\par
409 \par
410         {\cf18 string} decoded_msg; \par
413         {\cf19 for} ({\cf18 int} j = 0; j < msg_size; ++j)\par
414         \{\par
415             {\cf18 string} bin_char; \par
418             {\cf19 for} ({\cf18 int} i = 0; i < 8; ++i)\par
419             \{\par
420                 bin_char.push_back(bin_msg[i + (8 * j)]);\par
421             \}\par
422 \par
423             {\cf18 char} single_char = BinToInt(bin_char); \par
426             decoded_msg.push_back(single_char);\par
427         \}\par
428         cout << {\cf22 "\\033[94mA mensagem escondida \'E9: \\033[0m"} + decoded_msg << {\cf22 "\\n"};\par
429     \}\par
}
}
{\xe \v ExtensionCheck\:Image}
{\xe \v Image\:ExtensionCheck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Image::ExtensionCheck (const string & input_text, const string & file_type){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que verifica se uma string termina com a substring v\'E1lida. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input_text} \cell }{Texto inserido na fun\'E7\'E3o, que deve ser verificado. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_type} \cell }{A substring que voc\'EA deseja verificar se existe no final de uma determinada string. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true se a substring existir no final da string fornecida, false caso contr\'E1rio. \par
}}}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 158     \{\par
159         {\cf19 if} (input_text.length() >= file_type.length()) \par
160             \{\par
161             {\cf19 return} (input_text.compare(input_text.length() - file_type.length(), file_type.length(), file_type) == 0);\par
162             \} \par
163         {\cf19 else} \par
164             \{\par
165             {\cf19 return} {\cf17 false};\par
166             \}\par
167     \}\par
}
}
{\xe \v GetHeight\:Image}
{\xe \v Image\:GetHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Image::GetHeight () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m a altura da imagem. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 66     \{\par
67         {\cf19 return} height;\par
68     \}\par
}
}
{\xe \v GetPixels\:Image}
{\xe \v Image\:GetPixels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::GetPixels (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que preenche a matriz de pixels. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 108     \{\par
109         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
110         \{\par
111             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
112             \{\par
113                 {\cf18 int} r, g, b;\par
114                 cin >> r >> g >> b;\par
115                 pixel[h][w].r = r;\par
116                 pixel[h][w].g = g;\par
117                 pixel[h][w].b = b;\par
118             \}\par
119         \}\par
120     \}\par
}
}
{\xe \v GetWidth\:Image}
{\xe \v Image\:GetWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Image::GetWidth () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Obt\'E9m a largura da imagem. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 58     \{\par
59         {\cf19 return} width;\par
60     \}\par
}
}
{\xe \v IntToBin\:Image}
{\xe \v Image\:IntToBin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Image::IntToBin (int num, int bits = {\f2 8}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o recursiva para converter um valor inteiro em um valor bin\'E1rio. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{Valor inteiro a ser convertido em valor bin\'E1rio. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i bits} \cell }{O tamanho m\'E1ximo do valor bin\'E1rio a ser retornado. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
uma string contendo a representa\'E7\'E3o bin\'E1ria do n\'FAmero recebido. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Caso base: quando n\'E3o restam mais bits para converter.\par
Determina o bit atual em bin\'E1rio.\par
Chamada recursiva para calcular os bits remanescentes em bin\'E1rio.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 271     \{\par
273         {\cf19 if} (bits == 0)\par
274         \{\par
275             {\cf19 return} {\cf22 ""};\par
276         \}\par
277 \par
279         {\cf18 int} bit_current = num % 2;\par
280 \par
282         {\cf18 string} bit_subsequent = IntToBin(num / 2, bits - 1);\par
283         \par
284         {\cf19 return} bit_subsequent + (bit_current == 0 ? {\cf23 '0'} : {\cf23 '1'});\par
285     \}\par
}
}
{\xe \v LiberatePixels\:Image}
{\xe \v Image\:LiberatePixels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::LiberatePixels (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Libera a mem\'F3ria previamente alocada pela fun\'E7\'E3o {\b AllocatePixels()}, bem como a mem\'F3ria alocada pelo array dos valores 'R', 'G' e 'B' dos pixels. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Libera a mem\'F3ria utilizada pelo array dos valores 'R', 'G' e 'B' dos pixels, usado nas fun\'E7\'F5es {\b CreatePPM()}, {\b ReadPPM()}, {\b ShowArray()}, {\b CodeMsg()} e {\b DecodeMsg()}.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 86     \{\par
87         {\cf19 if} (pixel != {\cf17 nullptr})\par
88         \{\par
89             {\cf19 for} ({\cf18 int} i = 0; i < height; i++)\par
90             \{\par
91                 {\cf17 delete}[] pixel[i];\par
92             \}\par
93             {\cf17 delete}[] pixel;\par
94             pixel = {\cf17 nullptr};\par
95         \}\par
97         {\cf19 if} (pixel_array != {\cf17 nullptr})\par
98         \{\par
99             {\cf17 delete}[] pixel_array;\par
100             pixel_array = {\cf17 nullptr};\par
101         \}\par
102     \}\par
}
}
{\xe \v PrintPPM\:Image}
{\xe \v Image\:PrintPPM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::PrintPPM () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que imprime os par\'E2metros de uma imagem PPM. Usada para fins de teste. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 126     \{\par
127         cout << {\cf22 "\\033[94mDados da imagem: \\033[0m\\n"};\par
128         cout << {\cf22 "\\033[33m- Comprimento: \\033[0m\\n"}\par
129              << width << endl;\par
130         cout << {\cf22 "\\033[33m- Largura: \\033[0m\\n"}\par
131              << height << endl;\par
132         cout << {\cf22 "\\033[33m- Tipo de imagem: \\033[0m\\n"}\par
133              << img_type << endl;\par
134         cout << {\cf22 "\\033[33m- Valor m\'E1ximo de cor: \\033[0m\\n"}\par
135              << max_color << endl;\par
136         cout << {\cf22 "\\033[33m- Valor RGB de cada pixel:\\033[0m\\n"};\par
137 \par
138         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
139         \{\par
140             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
141             \{\par
142                 Pixel p = pixel[h][w];\par
143                 cout << (int)p.r << {\cf22 " "};\par
144                 cout << (int)p.g << {\cf22 " "};\par
145                 cout << (int)p.b << {\cf22 "   "};\par
146             \}\par
147             cout << endl;\par
148         \}\par
149         cout << endl;\par
150     \}\par
}
}
{\xe \v ReadPPM\:Image}
{\xe \v Image\:ReadPPM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Image::ReadPPM (const string & file_name){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA e armazena dinamicamente o conte\'FAdo de uma imagem de um arquivo PPM v\'E1lido. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i file_name} \cell }{O nome de um arquivo PPM armazenado previamente dentro da pasta de origem, que ser\'E1 lido pela fun\'E7\'E3o. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true se a imagem foi lida com sucesso, false caso contr\'E1rio. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Testa se o arquivo existe dentro da pasta de origem.\par
Testa se o arquivo \'E9 de fato um arquivo P3/PPM.\par
Aloca\'E7\'E3o de mem\'F3ria do array de pixels, usado na decodifica\'E7\'E3o e codifica\'E7\'E3o.\par
L\'EA e armazena em um array os valores 'R', 'G' e 'B' dos pixels.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 199     \{\par
201         ifstream file(file_name);\par
202         {\cf19 if} (!file)\par
203         \{\par
204             cerr << {\cf22 "\\033[31mErro de leitura. O arquivo "} << file_name << {\cf22 " n\'E3o existe.\\033[0m\\n"};\par
205             {\cf19 return} {\cf17 false};\par
206         \}\par
207 \par
208         {\cf18 string} file_type;\par
209         file >> file_type;\par
210 \par
212         {\cf19 if} (file_type != {\cf22 "P3"})\par
213         \{\par
214             cerr << {\cf22 "\\033[31mErro de leitura. O arquivo "} << file_name << {\cf22 " n\'E3o \'E9 uma imagem PPM no formato P3.\\033[0m\\n"}\par
215                  << endl;\par
216             {\cf19 return} {\cf17 false};\par
217         \}\par
218 \par
219         file >> width >> height >> max_color;\par
220         size = width * height * 3;\par
221 \par
222         AllocatePixels();\par
223 \par
225         pixel_array = {\cf17 new} {\cf18 int}[size];\par
226         {\cf18 int} index = 0;\par
227 \par
228         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
229         \{\par
230             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
231             \{\par
232                 {\cf18 int} r, g, b;\par
233                 file >> r >> g >> b;\par
234                 pixel[h][w].r = r;\par
235                 pixel[h][w].g = g;\par
236                 pixel[h][w].b = b;\par
238                 pixel_array[index++] = r;\par
239                 pixel_array[index++] = g;\par
240                 pixel_array[index++] = b;\par
241             \}\par
242         \}\par
243         file.close();\par
244         {\cf19 return} {\cf17 true};\par
245     \}\par
}
}
{\xe \v ShowArray\:Image}
{\xe \v Image\:ShowArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Image::ShowArray () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que exibe um array previamente definido de valores 'R', 'G' e 'B'. Usada para fins de teste. }}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 251     \{\par
252         {\cf19 if} (pixel_array == {\cf17 nullptr})\par
253         \{\par
254             cout << {\cf22 "Array n\'E3o inicializado."} << endl;\par
255             {\cf19 return};\par
256         \}\par
257         {\cf19 for} ({\cf18 int} i = 0; i < size; i += 3)\par
258         \{\par
259             cout << {\cf22 "Pixel ["} << i / 3 << {\cf22 "]: R = "} << pixel_array[i] << {\cf22 ", G = "} << pixel_array[i + 1]\par
260                  << {\cf22 ", B = "} << pixel_array[i + 2] << endl;\par
261         \}\par
262     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/{\b Image.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura Pixel\par \pard\plain 
{\tc\tcl2 \v Pixel}
{\xe \v Pixel}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct que define o pixel de uma imagem PPM. }}\par
{
{\f2 #include <Image.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b g}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b b}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct que define o pixel de uma imagem PPM. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r,g,b} \cell }{Representa os valores num\'E9ricos de Vermelho, Verde e Azul de cada pixel em uma imagem PPM. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v b\:Pixel}
{\xe \v Pixel\:b}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char Pixel::b}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v g\:Pixel}
{\xe \v Pixel\:g}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char Pixel::g}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v r\:Pixel}
{\xe \v Pixel\:r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char Pixel::r}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/{\b Image.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o do ficheiro{\tc \v Documenta\'E7\'E3o do ficheiro}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/cod.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/cod.cpp}
{\xe \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/cod.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <bits/stdc++.h>}\par
{\f2 #include <filesystem>}\par
{\f2 #include "../include/Image.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA uma imagem PPM e salva uma c\'F3pia com uma mensagem ASCII codificada no bit menos significativo (LSB) de seus pixels. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:cod.cpp}
{\xe \v cod.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA uma imagem PPM e salva uma c\'F3pia com uma mensagem ASCII codificada no bit menos significativo (LSB) de seus pixels. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{N\'FAmero de argumentos da linha de comando. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Argumentos da linha de comando. \cell }
{\row }
}
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena a mensagem que ser\'E1 armazenada dentro da imagem. \par
}{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena a imagem atrav\'E9s dos par\'E2metros da classe {\b Image}. \par
}{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena em uma string o conte\'FAdo da imagem PPM. \par
}Testa se o arquivo \'E9 de fato um arquivo P3/PPM observando sua extens\'E3o.\par
Testa se a fun\'E7\'E3o ReadPPM() foi bem-sucedida, interrompe o processo de codifica\'E7\'E3o caso contr\'E1rio.\par
A mensagem \'E9 inserida.\par
A mensagem \'E9 codificada.\par
Testa se um arquivo com o mesmo nome j\'E1 existe dentro da pasta de origem.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena a escolha de sobrescrever. A resposta padr\'E3o \'E9 'n\'E3o'. \par
}Testa se a resposta foi 'n\'E3o', se verdadeiro, interrompe o processo de codifica\'E7\'E3o.\par
Testa se o arquivo est\'E1 aberto, se verdadeiro, cria o arquivo PPM e armazena o conte\'FAdo modificado nele.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 14 \{\par
15     {\cf19 if} (argc != 3)\par
16     \{\par
17         cout << {\cf22 "Uso: "} << argv[0] << {\cf22 " <nome_do_arquivo_original> <nome_do_arquivo_resultante>"} << endl;\par
18         {\cf19 return} 1;\par
19     \}\par
20 \par
21     {\cf18 string} img_name = argv[1]; \par
22    {\cf18 string} file_name = argv[2]; \par
23     {\cf18 string} msg; \par
24     Image img; \par
25     ofstream file; \par
26     {\cf18 string} img_content; \par
28 {\cf20 // /** Testa se o arquivo \'E9 de fato um arquivo P3/PPM observando sua extens\'E3o. */}\par
29 {\cf19 if}(!img.ExtensionCheck(img_name, {\cf22 ".ppm"})) \par
30     \{       \par
31         cout << {\cf22 "\\033[1;31mTipo de arquivo de leitura inv\'E1lido.: "}+img_name +{\cf22 "\\033[0m\\n"};\par
32         {\cf19 return} 1;\par
33     \}\par
34     {\cf19 if}(!img.ExtensionCheck(file_name, {\cf22 ".ppm"})) \par
35     \{       \par
36         cout << {\cf22 "\\033[1;31mTipo de arquivo de saida inv\'E1lido.: "}+file_name +{\cf22 "\\033[0m\\n"};\par
37         {\cf19 return} 1;\par
38     \}\par
40     {\cf19 if} (img.ReadPPM(img_name))\par
41     \{\par
43         getline(cin, msg);\par
45         img.CodeMsg(msg);\par
46     \}\par
47     {\cf19 else}\par
48     \{\par
49         cout << {\cf22 "\\033[1;31mArquivo original n\'E3o existe.\\033[0m\\n"};\par
50         {\cf19 return} 0;\par
51     \}\par
52 \par
53    \par
54 \par
56     {\cf19 if} (fs::exists(file_name))\par
57     \{\par
58         {\cf18 char} overwrite = {\cf23 'n'}; \par
60         cout << {\cf22 "O arquivo "} << file_name << {\cf22 " j\'E1 existe. Deseja sobrescrev\'EA-lo? (s/n): "};\par
61         cin >> overwrite;\par
62 \par
64         {\cf19 if} (overwrite != {\cf23 's'} && overwrite != {\cf23 'S'})\par
65         \{\par
66             std::cout << {\cf22 "\\033[1;31mArquivo resultante j\'E1 existe. Opera\'E7\'E3o cancelada.\\033[0m\\n"};\par
67             {\cf19 return} 1;\par
68         \}\par
69     \}\par
70 \par
71     img_content = img.CreatePPM();\par
72 \par
74     file.open(file_name);\par
75     {\cf19 if} (file.is_open())\par
76     \{\par
77         file << img_content;\par
78         file.close();\par
79         cout << {\cf22 "\\033[1;32mImagem gerada com sucesso: "} << file_name << {\cf22 "\\033[0m"} << endl;\par
80        \par
81     \} \par
82     {\cf19 else} \par
83     \{\par
84         cout << {\cf22 "Erro ao criar o arquivo."} << endl;\par
85     \}\par
86 \par
87     {\cf19 return} 0;\par
88 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/decod.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/decod.cpp}
{\xe \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/decod.cpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <bits/stdc++.h>}\par
{\f2 #include <filesystem>}\par
{\f2 #include "../include/Image.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime uma mensagem ASCII codificada no bit menos significativo (LSB) dos pixels de uma imagem PPM. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:decod.cpp}
{\xe \v decod.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime uma mensagem ASCII codificada no bit menos significativo (LSB) dos pixels de uma imagem PPM. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{N\'FAmero de argumentos da linha de comando. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Argumentos da linha de comando. \cell }
{\row }
}
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se o n\'FAmero de argumentos est\'E1 correto.\par
{\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid \zwjArmazena a imagem PPM a ser decodificada. \par
}Testa se a fun\'E7\'E3o ReadPPM() foi bem-sucedida, interrompe o processo de decodifica\'E7\'E3o caso contr\'E1rio.\par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 13 \{\par
15     {\cf19 if} (argc != 2)\par
16     \{\par
17         cout << {\cf22 "Uso: "} << argv[0] << {\cf22 " <nome_do_arquivo>"} << endl;\par
18         {\cf19 return} 1;\par
19     \}\par
20 \par
21     {\cf18 string} img_name = argv[1];\par
22     Image img; \par
25     {\cf19 if} (img.ReadPPM(img_name))\par
26     \{\par
27         img.DecodeMsg();\par
28     \}\par
29    \par
30     img.LiberatePixels();\par
31 \par
32     {\cf19 return} 0;\par
33 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/Image.h\par \pard\plain 
{\tc\tcl2 \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/Image.h}
{\xe \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/Image.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de cabe\'E7alho usado tanto na codifica\'E7\'E3o quanto na decodifica\'E7\'E3o de imagens PPM usando esteganografia. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <bits/stdc++.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Pixel}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct que define o pixel de uma imagem PPM. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Image}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define uma imagem PPM alocada dinamicamente e fornece v\'E1rios m\'E9todos para manipular e acessar os dados da imagem. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de cabe\'E7alho usado tanto na codifica\'E7\'E3o quanto na decodifica\'E7\'E3o de imagens PPM usando esteganografia. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Vers\'E3o\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Data\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2024-07-08\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Copyright\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Direitos autorais (c) 2024 \par
}}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Image.h\par \pard\plain 
{\tc\tcl2 \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/Image.h}
{\xe \v D:/Usuario/OneDrive/Documentos/UFRN/ITP/esteganografia-lucas-e-malva/include/Image.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o deste ficheiro.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 \par
11 {\cf21 #ifndef IMAGE_H}\par
12 {\cf21 #define IMAGE_H}\par
13 \par
14 {\cf21 #include <bits/stdc++.h>}\par
15 {\cf17 using namespace }std;\par
16 \par
21 {\cf17 struct }Pixel\par
22 \{\par
23     {\cf18 unsigned} {\cf18 char} r, g, b;\par
24 \};\par
25 \par
29 {\cf17 class }Image\par
30 \{\par
31 {\cf17 private}:\par
32     {\cf18 string} img_type = {\cf22 "P3"};\par
33     {\cf18 int} width = 0, height = 0;\par
34     {\cf18 int} max_color = 255;\par
35     Pixel **pixel = {\cf17 nullptr};\par
36     {\cf18 int} size = (width * height) * 3;\par
37     {\cf18 int} *pixel_array = {\cf17 nullptr};\par
38 \par
39 {\cf17 public}:\par
43     Image() : width(0), height(0), pixel(nullptr), pixel_array(nullptr)\par
44     \{\}\par
45 \par
49     Image({\cf18 int} w, {\cf18 int} h) : width(w), height(h)\par
50     \{\par
51         size = (width * height) * 3; \par
52     \}\par
53 \par
57     {\cf18 int} GetWidth(){\cf17  const}\par
58 {\cf17     }\{\par
59         {\cf19 return} width;\par
60     \}\par
61 \par
65     {\cf18 int} GetHeight(){\cf17  const}\par
66 {\cf17     }\{\par
67         {\cf19 return} height;\par
68     \}\par
69 \par
73     {\cf18 void} AllocatePixels()\par
74     \{\par
75         pixel = {\cf17 new} Pixel *[height];\par
76         {\cf19 for} ({\cf18 int} i = 0; i < height; i++)\par
77         \{\par
78             pixel[i] = {\cf17 new} Pixel[width];\par
79         \}\par
80     \}\par
81 \par
85     {\cf18 void} LiberatePixels()\par
86     \{\par
87         {\cf19 if} (pixel != {\cf17 nullptr})\par
88         \{\par
89             {\cf19 for} ({\cf18 int} i = 0; i < height; i++)\par
90             \{\par
91                 {\cf17 delete}[] pixel[i];\par
92             \}\par
93             {\cf17 delete}[] pixel;\par
94             pixel = {\cf17 nullptr};\par
95         \}\par
97         {\cf19 if} (pixel_array != {\cf17 nullptr})\par
98         \{\par
99             {\cf17 delete}[] pixel_array;\par
100             pixel_array = {\cf17 nullptr};\par
101         \}\par
102     \}\par
103 \par
107     {\cf18 void} GetPixels()\par
108     \{\par
109         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
110         \{\par
111             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
112             \{\par
113                 {\cf18 int} r, g, b;\par
114                 cin >> r >> g >> b;\par
115                 pixel[h][w].r = r;\par
116                 pixel[h][w].g = g;\par
117                 pixel[h][w].b = b;\par
118             \}\par
119         \}\par
120     \}\par
121 \par
125     {\cf18 void} PrintPPM(){\cf17  const}\par
126 {\cf17     }\{\par
127         cout << {\cf22 "\\033[94mDados da imagem: \\033[0m\\n"};\par
128         cout << {\cf22 "\\033[33m- Comprimento: \\033[0m\\n"}\par
129              << width << endl;\par
130         cout << {\cf22 "\\033[33m- Largura: \\033[0m\\n"}\par
131              << height << endl;\par
132         cout << {\cf22 "\\033[33m- Tipo de imagem: \\033[0m\\n"}\par
133              << img_type << endl;\par
134         cout << {\cf22 "\\033[33m- Valor m\'E1ximo de cor: \\033[0m\\n"}\par
135              << max_color << endl;\par
136         cout << {\cf22 "\\033[33m- Valor RGB de cada pixel:\\033[0m\\n"};\par
137 \par
138         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
139         \{\par
140             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
141             \{\par
142                 Pixel p = pixel[h][w];\par
143                 cout << (int)p.r << {\cf22 " "};\par
144                 cout << (int)p.g << {\cf22 " "};\par
145                 cout << (int)p.b << {\cf22 "   "};\par
146             \}\par
147             cout << endl;\par
148         \}\par
149         cout << endl;\par
150     \}\par
157  {\cf18 bool} ExtensionCheck({\cf17 const} {\cf18 string} &input_text, {\cf17 const} {\cf18 string} &file_type) \par
158     \{\par
159         {\cf19 if} (input_text.length() >= file_type.length()) \par
160             \{\par
161             {\cf19 return} (input_text.compare(input_text.length() - file_type.length(), file_type.length(), file_type) == 0);\par
162             \} \par
163         {\cf19 else} \par
164             \{\par
165             {\cf19 return} {\cf17 false};\par
166             \}\par
167     \}\par
168 \par
173     {\cf18 string} CreatePPM(){\cf17  const}\par
174 {\cf17     }\{\par
175         stringstream img_content;\par
176 \par
177         img_content << {\cf22 "P3"} << endl;\par
178         img_content << width << {\cf22 " "} << height << endl;\par
179         img_content << max_color << endl;\par
180 \par
182         {\cf19 for} ({\cf18 int} i = 0; i < size; i += 3)\par
183         \{\par
184             img_content << pixel_array[i] << {\cf22 " "} << pixel_array[i + 1] << {\cf22 " "} << pixel_array[i + 2] << {\cf22 " "};\par
185             {\cf19 if} ((i / 3 + 1) % width == 0)\par
186             \{\par
187                 img_content << endl;\par
188             \}\par
189         \}\par
190         {\cf19 return} img_content.str();\par
191     \}\par
192 \par
198     {\cf18 bool} ReadPPM({\cf17 const} {\cf18 string} &file_name)\par
199     \{\par
201         ifstream file(file_name);\par
202         {\cf19 if} (!file)\par
203         \{\par
204             cerr << {\cf22 "\\033[31mErro de leitura. O arquivo "} << file_name << {\cf22 " n\'E3o existe.\\033[0m\\n"};\par
205             {\cf19 return} {\cf17 false};\par
206         \}\par
207 \par
208         {\cf18 string} file_type;\par
209         file >> file_type;\par
210 \par
212         {\cf19 if} (file_type != {\cf22 "P3"})\par
213         \{\par
214             cerr << {\cf22 "\\033[31mErro de leitura. O arquivo "} << file_name << {\cf22 " n\'E3o \'E9 uma imagem PPM no formato P3.\\033[0m\\n"}\par
215                  << endl;\par
216             {\cf19 return} {\cf17 false};\par
217         \}\par
218 \par
219         file >> width >> height >> max_color;\par
220         size = width * height * 3;\par
221 \par
222         AllocatePixels();\par
223 \par
225         pixel_array = {\cf17 new} {\cf18 int}[size];\par
226         {\cf18 int} index = 0;\par
227 \par
228         {\cf19 for} ({\cf18 int} h = 0; h < height; h++)\par
229         \{\par
230             {\cf19 for} ({\cf18 int} w = 0; w < width; w++)\par
231             \{\par
232                 {\cf18 int} r, g, b;\par
233                 file >> r >> g >> b;\par
234                 pixel[h][w].r = r;\par
235                 pixel[h][w].g = g;\par
236                 pixel[h][w].b = b;\par
238                 pixel_array[index++] = r;\par
239                 pixel_array[index++] = g;\par
240                 pixel_array[index++] = b;\par
241             \}\par
242         \}\par
243         file.close();\par
244         {\cf19 return} {\cf17 true};\par
245     \}\par
246 \par
250     {\cf18 void} ShowArray(){\cf17  const}\par
251 {\cf17     }\{\par
252         {\cf19 if} (pixel_array == {\cf17 nullptr})\par
253         \{\par
254             cout << {\cf22 "Array n\'E3o inicializado."} << endl;\par
255             {\cf19 return};\par
256         \}\par
257         {\cf19 for} ({\cf18 int} i = 0; i < size; i += 3)\par
258         \{\par
259             cout << {\cf22 "Pixel ["} << i / 3 << {\cf22 "]: R = "} << pixel_array[i] << {\cf22 ", G = "} << pixel_array[i + 1]\par
260                  << {\cf22 ", B = "} << pixel_array[i + 2] << endl;\par
261         \}\par
262     \}\par
263 \par
270     {\cf18 string} IntToBin({\cf18 int} num, {\cf18 int} bits = 8)\par
271     \{\par
273         {\cf19 if} (bits == 0)\par
274         \{\par
275             {\cf19 return} {\cf22 ""};\par
276         \}\par
277 \par
279         {\cf18 int} bit_current = num % 2;\par
280 \par
282         {\cf18 string} bit_subsequent = IntToBin(num / 2, bits - 1);\par
283         \par
284         {\cf19 return} bit_subsequent + (bit_current == 0 ? {\cf23 '0'} : {\cf23 '1'});\par
285     \}\par
286 \par
291     {\cf18 void} CodeMsg({\cf18 string} msg)\par
292     \{\par
293         {\cf18 int} t = msg.size(); \par
294         {\cf18 int} chars[t];       \par
297         {\cf19 for} ({\cf18 int} i = 0; i < t; ++i)\par
298         \{\par
299             chars[i] = (int)msg[i];\par
300         \}\par
301 \par
303         {\cf18 string} bin = IntToBin(t);\par
304 \par
306         {\cf19 for} ({\cf18 int} i = 0; i < 8 && i < size; ++i)\par
307         \{\par
308             {\cf19 if} (bin[i] == {\cf23 '1'})\par
309             \{\par
310                 {\cf19 if} (pixel_array[i] % 2 == 0)\par
311                 \{\par
312                     pixel_array[i]++;\par
313                 \}\par
314             \}\par
315             {\cf19 else}\par
316             \{\par
317                 {\cf19 if} (pixel_array[i] % 2 != 0)\par
318                 \{\par
319                     pixel_array[i]++;\par
320                 \}\par
321             \}\par
322         \}\par
323 \par
325         {\cf18 int} bit_index = 0; \par
326         {\cf19 for} ({\cf18 int} j = 0; j < t; ++j)\par
327         \{\par
328             bin = IntToBin(chars[j]);\par
329             {\cf19 for} ({\cf18 int} i = 0; i < 8 && (bit_index + 8) < size; ++i, ++bit_index)\par
330             \{\par
331                 {\cf19 if} (bin[i] == {\cf23 '1'})\par
332                 \{\par
333                     {\cf19 if} (pixel_array[bit_index + 8] % 2 == 0)\par
334                     \{\par
335                         pixel_array[bit_index + 8]++;\par
336                     \}\par
337                 \}\par
338                 {\cf19 else}\par
339                 \{\par
340                     {\cf19 if} (pixel_array[bit_index + 8] % 2 != 0)\par
341                     \{\par
342                         pixel_array[bit_index + 8]++;\par
343                         {\cf19 if} (pixel_array[bit_index + 8] == 255)\par
344                         \{\par
345                             pixel_array[bit_index + 8]--;\par
346                         \}\par
347                     \}\par
348                 \}\par
349             \}\par
350         \}\par
351     \}\par
352 \par
359     {\cf18 int} BinToInt({\cf18 string} bin_num, {\cf18 int} index = 0)\par
360     \{\par
362         {\cf19 if} (index == bin_num.length())\par
363         \{\par
364             {\cf19 return} 0;\par
365         \}\par
366 \par
368         {\cf18 int} value_current = (bin_num[index] - {\cf23 '0'}) * pow(2, bin_num.length() - 1 - index);\par
369         {\cf18 int} value_subsequent = BinToInt(bin_num, index + 1);\par
370 \par
371         {\cf19 return} value_current + value_subsequent;\par
372     \}\par
373 \par
377     {\cf18 void} DecodeMsg()\par
378     \{\par
379         {\cf18 string} bin_size; \par
382         {\cf19 for} ({\cf18 int} i = 0; i < 8; ++i)\par
383         \{\par
384             {\cf19 if} (pixel_array[i] % 2 == 0)\par
385             \{\par
386                 bin_size.push_back({\cf23 '0'}); \par
387             \}\par
388             {\cf19 else}\par
389             \{\par
390                 bin_size.push_back({\cf23 '1'}); \par
391             \}\par
392         \}\par
393 \par
394         {\cf18 string} bin_msg;                    \par
395         {\cf18 int} msg_size = BinToInt(bin_size); \par
398         {\cf19 for} ({\cf18 int} i = 8; i < 8 + (msg_size * 8); ++i)\par
399         \{\par
400             {\cf19 if} (pixel_array[i] % 2 == 0)\par
401             \{\par
402                 bin_msg.push_back({\cf23 '0'}); \par
403             \}\par
404             {\cf19 else}\par
405             \{\par
406                 bin_msg.push_back({\cf23 '1'}); \par
407             \}\par
408         \}\par
409 \par
410         {\cf18 string} decoded_msg; \par
413         {\cf19 for} ({\cf18 int} j = 0; j < msg_size; ++j)\par
414         \{\par
415             {\cf18 string} bin_char; \par
418             {\cf19 for} ({\cf18 int} i = 0; i < 8; ++i)\par
419             \{\par
420                 bin_char.push_back(bin_msg[i + (8 * j)]);\par
421             \}\par
422 \par
423             {\cf18 char} single_char = BinToInt(bin_char); \par
426             decoded_msg.push_back(single_char);\par
427         \}\par
428         cout << {\cf22 "\\033[94mA mensagem escondida \'E9: \\033[0m"} + decoded_msg << {\cf22 "\\n"};\par
429     \}\par
430 \};\par
431 \par
432 {\cf21 #endif}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
